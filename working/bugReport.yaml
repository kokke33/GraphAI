version: 0.5
nodes:
  # 最初のプロンプト
  First_prompt:
    agent: stringTemplateAgent
    params:
      template: "\e[32mAI\e[0m: 障害事象を教えてください"
    console:
      after: true
  
  nestedsuggestIdea:
    agent: "mapAgent"
    inputs:
      rows: [:First_prompt]
    graph:
      version: 0.5
      loop:
        while: :continue
      nodes:
        # 繰り返し定義
        continue:
          value: true
          # update: :llm.choices.$0.message.content
          update: :loopCheck.continue
        # 最終結果の出力（nestedsuggestIdeaの結果出力なのでisResult: true）
        information:
          value: {}
          update: :argumentsParser
          isResult: true
        # メッセージ
        messages:
          value:
            - role: system
              content: >
                私はシステムエンジニアです。発生している障害の報告を行おうとしています。
                私はあなたに私の障害報告に特化した文章作成家になってもらいたいと思っています。
                あなたの目標は私が必要とする最高の障害報告書を作ることを手助けすることです。
                以下のプロセスに従ってください。

                あなたの最初の反応は、入力した「障害事象」をもとに障害報告書を一緒に作ろうと励ますことです。
                私は答えを提供しますが、次のステップを繰り返すことで改善する必要があります。

                私の入力に基づいて、2つのセクションを生成します。
                a）改訂障害報告書
                  （あなたが書き直した障害報告書をを提供してください。
                  それは明確で簡潔で、あなたによって簡単に理解できるものである必要があります。
                  私が提供した情報をもとに作成してください。）
                b）質問
                  （障害報告書を改善するために私から必要な追加情報に関する関連する質問をしてください。
                  【障害報告書に必要な情報】を１つ１つ聞き出して整理していってください）
                
                【障害報告書に必要な情報】
                  1.障害事象
                  2.障害対応
                  3.障害状況（可能な限り時系列で）
                  4.障害・被害の度合い（顧客影響）
                  5.直接原因
                  6.作り込み原因
                  7.流出原因
                  8.根本原因
                  9.類似調査
                  10.再発防止策
                  11.再発防止策の効果確認方法

                私が完成したと言うまで、あなたが追加情報を提供し、
                改訂障害報告書セクションで障害報告書を更新するという反復プロセスを続けます。
                一度に複数の質問はせずに、１つずつ質問をしてください。
                その際、英語で考えて、すべて日本語で出力してください。
                ステップバイステップで考えてください。
                私が完成したと言うまで続けます。

                「完成した」場合、、関数 'report' を呼び出してください。

          update: :reducer
        userInput:
          agent: textInputAgent
          params:
            message: "あなた:"
        userMessage:
          agent: propertyFilterAgent
          params:
            inject:
              - propId: content
                from: 1
          inputs:
            - role: user
            - :userInput
        appendedMessages:
          agent: pushAgent
          inputs:
            array: :messages
            item: :userMessage
        
        # LLM
        llm:
          # agent: groqAgent
          # params:
          #   model: gemma2-9b-it
          #   model: Llama3-70b-8192
          agent: openAIAgent
          params:
            # model: gpt-4o
            model: gpt-4o-mini
            tools:
              - type: function
                function:
                  name: report
                  description: 
                    ユーザーから取得した情報を報告してください。
                    すべて日本語になっていること。
                  parameters:
                    type: object
                    properties:
                      障害事象:
                        type: string
                        description: 
                          障害事象。
                          何を行った際にどのような事象が起きたのか。
                          発生した画面、または機能名が箇所が具体的に記載されていること。
                      障害対応:
                        type: string
                        description: 
                          障害対応として、必ず暫定対応と恒久対応の２種類を記載すること。
                      障害状況:
                        type: string
                        description: 
                          障害状況。可能な限り時系列で記載すること。
                      被害の度合い:
                        type: string
                        description: 
                          被害の度合い。顧客にどのような影響が出たのかを具体的に記載すること。
                      直接原因:
                        type: string
                        description: 直接原因
                      作り込み原因:
                        type: string
                        description: 作り込み原因
                      流出原因:
                        type: string
                        description: 流出原因
                      根本原因:
                        type: string
                        description: 根本原因
                      類似調査:
                        type: string
                        description: 類似調査
                      再発防止策:
                        type: string
                        description: 再発防止策
                      再発防止策の効果確認方法:
                        type: string
                        description: 再発防止策の効果確認方法
                    required:
                      - 障害事象
                      - 障害対応
                      - 障害状況
                      - 被害の度合い
                      - 直接原因
                      - 作り込み原因
                      - 流出原因
                      - 根本原因
                      - 類似調査
                      - 再発防止策
                      - 再発防止策の効果確認方法
          inputs:
            messages: :appendedMessages

        # LLMの結果を配列に入れる
        reducer:
          agent: pushAgent
          inputs:
            array: :appendedMessages
            item: :llm.choices.$0.message

        # LLMの結果を画面に返却
        output:
          agent: stringTemplateAgent
          params:
            template: "\e[32mAI\e[0m: ${0}\n"
          console:
            after: true
          inputs:
            - :llm.choices.$0.message.content
          if: :llm.choices.$0.message.content

        # 結果に対してLLMで情報追加
        # ★★★「最後に本会話は終了させてください」が重要。そうしないと会話続けてしまってエラーとなる
        # "An assistant message with 'tool_calls' must be followed by tool messages responding to each 'tool_call_id'.
        # ↑後で分かったことだが「LLMの回答（Contents）とtool_call回答の両方が入る」ことがある。その場合に上記エラーとなる。
        # 対策として、ループ判定を「:llm.choices.$0.message.content」⇒「loopCheck」の通りに修正した
        meaning_llm:
          # agent: groqAgent
          # params:
          #   model: gemma2-9b-it        
          agent: openAIAgent
          params:
            model: gpt-4o-mini
            system: >
              あなたはプロのシステム障害報告プロンプト作成者です。
              このプロンプトをレビューし最適化し、結果だけを返却してください。
          inputs:
            prompt: :llm.choices.$0.message.tool_calls.$0.function.arguments
          if: :llm.choices.$0.message.tool_calls

        # Json形式だと「nestedsuggestIdea_result」で出力できないので
        # いったんcopyAgentを使う
        argumentsParser:
          # agent: jsonParserAgent
          agent: copyAgent
          inputs:
            - :llm.choices.$0.message.tool_calls.$0.function.arguments
            # - :meaning_llm.choices.$0.message.content
          if: :llm.choices.$0.message.tool_calls
          # if: :meaning_llm.choices.$0.message.content

        # llmのfinish_reasonを確認。tool_calls以外は「stop」となる。
        # よって、stopの時にループする
        loopCheck:
          agent: propertyFilterAgent
          params:
            # ★★equal,notEqual スペルミスすると動かない！！！★★
            inspect:
              - propId: continue
                equal: "stop"
          inputs:
            - {}
            - :llm.choices.$0.finish_reason
            
  # ネストノード２の結果をインプットにした処理
  nestedsuggestIdea_result:
    agent: "stringTemplateAgent"
    params:
      template: "\e[32m完成したPrompt\e[0m:\n${0}\n"
    # contoleは必須
    console:
      after: true
    # stringTemplateAgentのinputsは改行できない
    # inputs: [":nestedsuggestIdea.meaning_llm.choices.$0.message.content"]
    inputs: [":nestedsuggestIdea.information"]
    # isResult: true
